#!/usr/bin/env bash

# Docker Appliance for redis:alpine
# Auto-generated by Docker to OpenNebula automation

ONE_SERVICE_PARAMS=(
    'ONEAPP_DOCKER_PORTS'               'configure' 'Port mappings (e.g., 8080:8080)'                    'O|text'
    'ONEAPP_DOCKER_VOLUMES'             'configure' 'Volume mappings'                                    'O|text'
    'ONEAPP_DOCKER_ENV_VARS'            'configure' 'Environment variables'                              'O|text'
    'ONEAPP_DOCKER_COMMAND'             'configure' 'Custom command'                                     'O|text'
    'ONEAPP_DOCKER_REGISTRY_URL'        'configure' 'Registry URL (optional)'                           'O|text'
    'ONEAPP_DOCKER_REGISTRY_USER'       'configure' 'Registry username (optional)'                      'O|text'
    'ONEAPP_DOCKER_REGISTRY_PASSWORD'   'configure' 'Registry password (optional)'                      'O|password'
)

# Default values
ONEAPP_DOCKER_PORTS="${ONEAPP_DOCKER_PORTS:-6379:6379}"
ONEAPP_DOCKER_VOLUMES="${ONEAPP_DOCKER_VOLUMES:-}"
ONEAPP_DOCKER_ENV_VARS="${ONEAPP_DOCKER_ENV_VARS:-}"
ONEAPP_DOCKER_COMMAND="${ONEAPP_DOCKER_COMMAND:-}"
ONEAPP_DOCKER_REGISTRY_URL="${ONEAPP_DOCKER_REGISTRY_URL:-}"
ONEAPP_DOCKER_REGISTRY_USER="${ONEAPP_DOCKER_REGISTRY_USER:-}"
ONEAPP_DOCKER_REGISTRY_PASSWORD="${ONEAPP_DOCKER_REGISTRY_PASSWORD:-}"

# Docker image configuration
DOCKER_IMAGE="redis"
DOCKER_TAG="alpine"

# Load common functions
. /etc/one-appliance/lib/common.sh

service_install() {
    msg info "Installing Docker"
    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    return 0
}

service_configure() {
    msg info "Configuring Docker"
    systemctl enable docker
    systemctl start docker
    usermod -aG docker oneadmin 2>/dev/null || true
    
    # Registry authentication if provided
    if [[ -n "$ONEAPP_DOCKER_REGISTRY_URL" && -n "$ONEAPP_DOCKER_REGISTRY_USER" && -n "$ONEAPP_DOCKER_REGISTRY_PASSWORD" ]]; then
        echo "$ONEAPP_DOCKER_REGISTRY_PASSWORD" | docker login "$ONEAPP_DOCKER_REGISTRY_URL" --username "$ONEAPP_DOCKER_REGISTRY_USER" --password-stdin
    fi
    return 0
}

service_bootstrap() {
    msg info "Starting Docker container"
    docker pull "${DOCKER_IMAGE}:${DOCKER_TAG}"
    
    local docker_cmd="docker run -d --name redis-cache"
    
    # Add port mappings
    if [[ -n "$ONEAPP_DOCKER_PORTS" ]]; then
        IFS=',' read -ra PORTS_ARRAY <<< "$ONEAPP_DOCKER_PORTS"
        for port in "${PORTS_ARRAY[@]}"; do
            docker_cmd="$docker_cmd -p $port"
        done
    fi
    
    # Add volume mappings
    if [[ -n "$ONEAPP_DOCKER_VOLUMES" ]]; then
        IFS=',' read -ra VOLUMES_ARRAY <<< "$ONEAPP_DOCKER_VOLUMES"
        for volume in "${VOLUMES_ARRAY[@]}"; do
            docker_cmd="$docker_cmd -v $volume"
        done
    fi
    
    # Add environment variables
    if [[ -n "$ONEAPP_DOCKER_ENV_VARS" ]]; then
        IFS=',' read -ra ENV_ARRAY <<< "$ONEAPP_DOCKER_ENV_VARS"
        for env in "${ENV_ARRAY[@]}"; do
            docker_cmd="$docker_cmd -e $env"
        done
    fi
    
    docker_cmd="$docker_cmd ${DOCKER_IMAGE}:${DOCKER_TAG}"
    
    if [[ -n "$ONEAPP_DOCKER_COMMAND" ]]; then
        docker_cmd="$docker_cmd $ONEAPP_DOCKER_COMMAND"
    fi
    
    eval "$docker_cmd"
    sleep 5
    
    if docker ps | grep -q "redis-cache"; then
        msg info "✓ Container started successfully"
    else
        msg error "✗ Container failed to start"
        return 1
    fi
    return 0
}

service_status() {
    msg info "Docker: $(docker --version 2>/dev/null || echo 'Not available')"
    msg info "Image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
    msg info "Ports: ${ONEAPP_DOCKER_PORTS}"
    return 0
}

service_cleanup() {
    docker stop "redis-cache" 2>/dev/null || true
    docker rm "redis-cache" 2>/dev/null || true
    return 0
}
