#!/usr/bin/env bash

# Phoenix RTOS Appliance Installation Script
# Auto-generated by OpenNebula Docker Appliance Generator
# Docker Image: pablodelarco/phoenix-rtos-one:latest

set -o errexit -o pipefail

# List of contextualization parameters
ONE_SERVICE_PARAMS=(
    'ONEAPP_CONTAINER_NAME'     'configure'  'Docker container name'                    'O|text'
    'ONEAPP_CONTAINER_PORTS'    'configure'  'Docker container port mappings'           'O|text'
    'ONEAPP_CONTAINER_ENV'      'configure'  'Docker container environment variables'   'O|text'
    'ONEAPP_CONTAINER_VOLUMES'  'configure'  'Docker container volume mappings'         'O|text'
)

# Configuration from user input
DOCKER_IMAGE="pablodelarco/phoenix-rtos-one:latest"
DEFAULT_CONTAINER_NAME="phoenix-rtos-one"
DEFAULT_PORTS="8080:8080"
DEFAULT_ENV_VARS=""
DEFAULT_VOLUMES="/data:/data"
APP_NAME="Phoenix RTOS"
APPLIANCE_NAME="phoenixrtos"

### Appliance metadata ###############################################

# Appliance metadata
ONE_SERVICE_NAME='Phoenix RTOS'
ONE_SERVICE_VERSION='1.0'   # Appliance version
ONE_SERVICE_BUILD=$(date +%s)
ONE_SERVICE_SHORT_DESCRIPTION='Phoenix RTOS Docker Container Appliance'
ONE_SERVICE_DESCRIPTION='Phoenix RTOS running in Docker container'
ONE_SERVICE_RECONFIGURABLE=true

### Appliance functions ##############################################

service_cleanup()
{
    :
}

service_install()
{
    export DEBIAN_FRONTEND=noninteractive

# Update system
apt-get update
apt-get upgrade -y

# Install Docker
apt-get install -y ca-certificates curl
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
chmod a+r /etc/apt/keyrings/docker.asc

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Enable and start Docker
systemctl enable docker
systemctl start docker

# Pre-create the data directory
mkdir -p /data
chown 1000:1000 /data

# Pull Phoenix RTOS image during installation
msg info "Pulling Phoenix RTOS Docker image"
docker pull $DOCKER_IMAGE

# Verify the image was pulled
msg info "Verifying Phoenix RTOS image was pulled:"
docker images pablodelarco/phoenix-rtos-one

# Configure console auto-login
systemctl stop unattended-upgrades 2>/dev/null || true
systemctl disable unattended-upgrades 2>/dev/null || true
apt-get install -y mingetty
mkdir -p /etc/systemd/system/getty@tty1.service.d
cat > /etc/systemd/system/getty@tty1.service.d/override.conf << 'EOF'
[Service]
ExecStart=
ExecStart=-/sbin/agetty --noissue --autologin root %I $TERM
Type=idle
EOF

# Configure serial console and set root password
mkdir -p /etc/systemd/system/serial-getty@ttyS0.service.d
cat > /etc/systemd/system/serial-getty@ttyS0.service.d/override.conf << 'EOF'
[Service]
ExecStart=
ExecStart=-/sbin/agetty --noissue --autologin root %I 115200,38400,9600 vt102
Type=idle
EOF
echo 'root:opennebula' | chpasswd
systemctl enable getty@tty1.service serial-getty@ttyS0.service

# Create welcome message
cat > /etc/profile.d/99-phoenixrtos-welcome.sh << 'EOF'
#!/bin/bash
case $- in *i*) ;; *) return;; esac
echo "=================================================="
echo "  Phoenix RTOS Appliance - Container: phoenix-rtos-one"
echo "  Commands: docker ps | docker logs phoenix-rtos-one"
echo "=================================================="
EOF
chmod +x /etc/profile.d/99-phoenixrtos-welcome.sh

# Clean up
apt-get autoremove -y
apt-get autoclean
find /var/log -type f -exec truncate -s 0 {} \;

sync
}

service_configure()
{
    msg info "Starting Phoenix RTOS service configuration"

    # Ensure Docker is running
    if ! systemctl is-active --quiet docker; then
        msg info "Starting Docker service..."
        systemctl enable docker
        systemctl start docker
        sleep 3
    fi

    # Verify Docker is working
    if docker info >/dev/null 2>&1; then
        msg info "✓ Docker is running and accessible"
    else
        msg error "✗ Docker is not working properly"
        return 1
    fi

    msg info "Phoenix RTOS configuration completed"
    return 0
}

service_bootstrap()
{
    msg info "Starting Phoenix RTOS service bootstrap"

    # Ensure Docker is running
    if ! systemctl is-active --quiet docker; then
        msg info "Starting Docker service..."
        systemctl start docker
        sleep 3
    fi

    # Setup Phoenix RTOS container
    msg info "Setting up Phoenix RTOS container"
    setup_phoenixrtos_container

    msg info "Phoenix RTOS bootstrap completed"
    return 0
}

# Phoenix RTOS container setup function
setup_phoenixrtos_container()
{
    local container_name="phoenix-rtos-one"
    local image_name="pablodelarco/phoenix-rtos-one:latest"

    msg info "Setting up Phoenix RTOS container: $container_name"

    # Stop and remove any existing Phoenix RTOS container
    if docker ps -a --filter "name=$container_name" --format "table {{.Names}}" | grep -q "$container_name"; then
        msg info "Stopping and removing existing Phoenix RTOS container"
        docker stop "$container_name" 2>/dev/null || true
        docker rm "$container_name" 2>/dev/null || true
        sleep 2
    fi

    # Create data directory
    mkdir -p /data

    # Start Phoenix RTOS container
    msg info "Starting Phoenix RTOS container"
    if docker run -d \
        --name "$container_name" \
        --restart unless-stopped \
        -p 8080:8080 \
        -v /data:/data \
        --label oneapp.managed=true \
        --label oneapp.service=phoenixrtos \
        "$image_name"; then

        msg info "✓ Phoenix RTOS container created and started successfully"

        # Wait and verify container is running
        sleep 5
        if docker ps --filter "name=$container_name" --format "table {{.Names}}" | grep -q "$container_name"; then
            msg info "✓ Phoenix RTOS container is running"

            # Wait for container to be stable
            msg info "⏳ Waiting for Phoenix RTOS container to be stable..."
            local max_attempts=30
            local attempt=1

            while [ $attempt -le $max_attempts ]; do
                if docker ps --filter "name=$container_name" --format "table {{.Names}}" | grep -q "$container_name"; then
                    msg info "✅ Phoenix RTOS container is stable and running!"
                    break
                fi

                if [ $attempt -eq $max_attempts ]; then
                    msg warn "⚠️  Phoenix RTOS container not stable after ${max_attempts} seconds"
                    break
                fi

                sleep 1
                attempt=$((attempt + 1))
            done

            # Show container status
            local status=$(docker ps --filter "name=$container_name" --format "{{.Status}}")
            msg info "  Status: $status"
        else
            msg error "✗ Phoenix RTOS container stopped unexpectedly"
            msg info "Container logs:"
            docker logs "$container_name" 2>&1 | tail -10 | while read line; do
                msg info "  $line"
            done
            return 1
        fi
    else
        msg error "✗ Failed to start Phoenix RTOS container"
        return 1
    fi
}


